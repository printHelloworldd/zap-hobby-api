version: '3.8'
services:
  redis:
    container_name: redis
    image: redis:alpine3.22
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - hobby_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
  postgres:
    container_name: hobby_postgres
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      INPUT_DIR: ./tmp/exports
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5332:5432"
    networks:
      - hobby_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  init_db:
    image: postgres:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./init-tables.sh:/tmp/init-tables.sh
      - ./exports:/tmp/exports
    command: bash -c "chmod +x /tmp/init-tables.sh && /tmp/init-tables.sh"
    networks:
      - hobby_network

  nginx:
    image: nginx:alpine
    container_name: hobby_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - hobby_network
    depends_on:
      - spring_app_1
      - spring_app_2
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "nginx", "-t" ]
      interval: 30s
      timeout: 10s
      retries: 3

  spring_app_1:
    build:
      context: spring-boot
      dockerfile: Dockerfile
    container_name: hobby_app_1
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/hobbies_db
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: false
      SERVER_PORT: 8080
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_URL: ${REDIS_URL}
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hobby_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  spring_app_2:
    build:
      context: spring-boot
      dockerfile: Dockerfile
    container_name: hobby_app_2
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/hobbies_db
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: false
      SERVER_PORT: 8080
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_URL: ${REDIS_URL}
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hobby_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  hobby_network:
    driver: bridge

volumes:
  postgres:
    driver: local
  redis_data:
  init_db:
